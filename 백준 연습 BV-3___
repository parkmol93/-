//27324
import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val line=readLine()!!.toInt()
    if(line/10==line%10) print(1)
    else print(0)
}

//27433
import java.util.Scanner
import java.math.BigInteger
fun factorial(n:BigInteger,acc:BigInteger):BigInteger{
    return if(n<=BigInteger("1")) return acc
    else factorial(n-BigInteger("1"),acc*n)
}
fun main()=with(Scanner(System.`in`)){
    print(factorial(nextBigInteger(),BigInteger("1")))
}

import java.util.Scanner
fun factorial(n:Long):Long{
    return if(n<=1) 1
    else n*factorial(n-1)
}
fun main()=with(Scanner(System.`in`)){
    print(factorial(nextLong()))
}

//27434
import java.util.Scanner
import java.math.BigInteger
fun fact(a:BigInteger,n:BigInteger):BigInteger{
    val b=(a+n)/BigInteger("2")
    var acc:BigInteger=a
    if(a<n) acc=fact(a,b)*fact(b+BigInteger("1"),n)
    return acc
}
fun main()=with(Scanner(System.`in`)){
    val n=nextBigInteger()
    print(fact(BigInteger("1"),n))   
}

//27866
import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val line=readLine()!!
    val n=nextInt()
    print(line.substring(n-1,n))
}

//29699
import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val n=nextInt()%14
    val s="WelcomeToSMUPC"
    print(if(n==0) "C" else s.substring(n-1,n))
}

//30224
import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val n=nextInt()
    when{
        n.toString().contains("7") -> when{
            n%7==0 -> print(3)
            else -> print(2)
            }
        else -> when{
            n%7==0 -> print(1)
            else -> print(0)
        }
    }
}

import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val n=nextInt()
    when{
        "7" in n.toString() -> when{
            n%7==0 -> print(3)
            else -> print(2)
            }
        else -> when{
            n%7==0 -> print(1)
            else -> print(0)
        }
    }
}

//31429
import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val n=nextInt()
    val p=intArrayOf(12,11,11,10,9,9,9,8,7,6,6)
    val t=intArrayOf(1600,894,1327,1311,1004,1178,1357,837,1055,556,773)
    when(n){
        1 -> print("${p[n-1]} ${t[n-1]}")
        2 -> print("${p[n-1]} ${t[n-1]}")
        3 -> print("${p[n-1]} ${t[n-1]}")
        4 -> print("${p[n-1]} ${t[n-1]}")
        5 -> print("${p[n-1]} ${t[n-1]}")
        6 -> print("${p[n-1]} ${t[n-1]}")
        7 -> print("${p[n-1]} ${t[n-1]}")
        8 -> print("${p[n-1]} ${t[n-1]}")
        9 -> print("${p[n-1]} ${t[n-1]}")
        10 -> print("${p[n-1]} ${t[n-1]}")
        else -> print("${p[10]} ${t[10]}")
    }
}

//32154
fun main() {
    val n = readLine()!!.toInt()
    val visit = BooleanArray(13) //모두 false로 초기화됨
    visit[0] = true
    visit[1] = (n == 1 || n == 4 || n == 10)
    visit[2] = true
    visit[3] = (n == 1)
    visit[4] = (n != 10)
    visit[5] = true
    visit[6] = true
    visit[7] = true
    visit[8] = (n == 2 || n == 3)
    visit[9] = (n == 1)
    visit[10] = false //필요X
    visit[11] = true
    visit[12] = true
    val problems = mutableListOf<Char>()
    for(i in visit.indices){
        if (visit[i] && i!= 10){ // visit[10]은 필요X
            problems.add('A' + i)
        }
    }
    println(problems.size)
    println(problems.joinToString(" "))
}

import java.util.Scanner
fun main()=with(Scanner(System.`in`)){
    val n=nextInt()
    val sb=mapOf(
        1 to listOf("A", "B", "C", "D", "E", "F", "G", "H", "J", "L", "M"),
        2 to listOf("A", "C", "E", "F", "G", "H", "I", "L", "M"),
        3 to listOf("A", "C", "E", "F", "G", "H", "I", "L", "M"),
        4 to listOf("A", "B", "C", "E", "F", "G", "H", "L", "M"),
        5 to listOf("A", "C", "E", "F", "G", "H", "L", "M"),
        6 to listOf("A", "C", "E", "F", "G", "H", "L", "M"),
        7 to listOf("A", "C", "E", "F", "G", "H", "L", "M"),
        8 to listOf("A", "C", "E", "F", "G", "H", "L", "M"),
        9 to listOf("A", "C", "E", "F", "G", "H", "L", "M"),
        10 to listOf("A", "B", "C", "F", "G", "H", "L", "M"))
    val answer=sb[n] ?: emptyList()
    println(answer.size)
    println(answer.joinToString(" "))
}

//
