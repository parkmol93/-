1. 배열(IntArray) vs. 가변 리스트(MutableList)의 차이
IntArray (배열):
IntArray는 크기가 고정된 원시 타입 배열입니다.

배열은 고정된 크기를 갖기 때문에 메모리 상에서 직접적인 접근이 가능하고, 수정과 조회가 매우 빠릅니다.

IntArray는 메모리 효율이 높고, 컴파일러 최적화가 잘 이루어집니다.

MutableList (가변 리스트):
MutableList는 크기가 동적으로 변할 수 있는 리스트입니다.

내부적으로 배열을 사용하여 값을 저장하지만, 리스트는 동적 크기 조정이 가능하고, 추가, 삭제, 삽입 등의 연산을 지원하기 위해 추가적인 메커니즘이 필요합니다.

성능이 배열보다 다소 떨어질 수 있습니다, 특히 크기가 자주 변하는 경우.

2. 성능 차이가 나는 이유:
배열 (IntArray)은 고정된 크기와 원시 타입을 사용하기 때문에, 정렬 같은 연산을 할 때 메모리 접근이 빠르고 효율적입니다.

가변 리스트 (mutableListOf<Int>)는 배열을 기반으로 하더라도, 크기 조정 및 동적 변경을 지원해야 하므로 추가적인 오버헤드가 발생할 수 있습니다. 예를 들어, 요소를 추가할 때 add() 함수가 내부적으로 배열을 확장하는 과정을 거칠 수 있고, 그로 인해 성능에 약간의 오버헤드가 발생할 수 있습니다.

3. 메모리 사용 차이:
IntArray는 원시 배열이기 때문에, 메모리 사용이 더 효율적입니다. 즉, 각 요소는 정수값만을 저장합니다.

MutableList는 동적 리스트이므로, 요소를 저장하는 데 추가적인 객체 구조가 필요하고, 이로 인해 메모리 사용에서 약간의 추가 오버헤드가 발생할 수 있습니다.

4. 정렬 차이:
IntArray에서 sort()는 배열을 직접 정렬하기 때문에 성능이 좋습니다.

MutableList에서 sort()는 리스트 요소를 일시적으로 배열로 변환할 수 있는데, 그로 인해 배열로 변환하는 과정이 추가로 필요할 수 있습니다. 이 과정에서 약간의 시간이 더 걸릴 수 있습니다.

결론:
**배열(IntArray)**을 사용하는 경우 메모리와 성능 측면에서 더 효율적입니다.

**가변 리스트(MutableList)**는 크기가 동적으로 변경될 수 있기 때문에 더 유연하지만, 성능 면에서 약간의 오버헤드가 있을 수 있습니다.

따라서, IntArray를 사용하는 코드가 더 빠른 이유는 배열이 고정 크기의 원시 타입을 사용하며, 더 적은 오버헤드를 발생시키기 때문입니다. MutableList는 동적 크기 변경을 지원하지만, 그로 인한 메모리 오버헤드나 성능 저하가 있을 수 있습니다.
//array와 가변리스트는 sort()를 사용하고 불변리스트는 sorted()를 사용한다!!!!!!!!!!
