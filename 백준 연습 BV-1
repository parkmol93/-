import java.io.BufferedReader
import java.io.InputStreamReader
import java.util.StringTokenizer
fun main(args: Array<String>){
    val br=BufferedReader(InputStreamReader(System.`in`))
    val token=StringTokenizer(br.readLine())
    println(token.nextToken().toDouble()/token.nextToken().toDouble())
    br.close()
}

fun main(args: Array<String>){
    val (A,B)=readln().split(" ").map{it.toInt()}
    println(when{
        A>B -> ">"
        A==B -> "=="
        else -> "<"
    })
}

import java.util.Scanner
fun main(){
    with(Scanner(System.`in`)){
        val A=nextInt()
        val B=nextInt()
        println(when{
            A>B -> ">"
            A==B -> "=="
            else -> "<"
        })
    }
}

// 여러줄 입력시
import java.util.Scanner
import java.math.BigInteger
fun main(){
    with(Scanner(System.`in`)){
        val A=nextBigInteger()
        val B=nextBigInteger()
        println(A+B)
        println(A-B)
        println(A*B)
    }
}

//2420
import java.util.*
fun main(){
    with(Scanner(System.`in`)){
        val N=nextLong()
        val M=nextLong()
        println(Math.abs(N-M))
    }
}

//2438
fun main(args: Array<String>){
    readln()!!.toInt().let{
        for(i in 1 .. it){
            for(j in 1 .. i){
                print("*")
            }
            println("")
        }
    }
}

import java.io.*
fun main(args:Array<String>){
    try{
        val br=BufferedReader(InputStreamReader(System.`in`))
        val bw=BufferedWriter(OutputStreamWriter(System.`out`))
        val n=br.readLine().toInt()
        for(i in 1 .. n){
            for(j in 1 .. i){
                bw.write("*")
            }
            bw.write("\n")
        }
    br.close()
    bw.flush()
    bw.close()
    }catch(e: IOException){
        println(e.message)
    }
}

//2475
import java.io.*
import kotlin.math.pow
fun main(args: Array<String>){
    with(BufferedReader(InputStreamReader(System.`in`))){
        println(readLine()!!.let{
            it.split(" ")
            .map{it.toDouble().pow(2)}
            .reduce{acc, d -> acc+d}.toInt()%10
        })
    }
}

//2744
import java.io.*
fun main(args: Array<String>){
    with(BufferedReader(InputStreamReader(System.`in`))){
        val line=readLine()
        val bw=BufferedWriter(OutputStreamWriter(System.`out`))
        val converted=line.map{
            when(it){
                in 'A'..'Z' -> (it+32).toChar()
                else -> (it-32).toChar()
            }
        }.joinToString("")
        bw.write(converted)
        close()
        bw.flush()
        bw.close()
    }
}

import java.io.*
fun main(){
    with(BufferedReader(InputStreamReader(System.`in`))) {
        val bw = BufferedWriter(OutputStreamWriter(System.out))
        bw.write(readLine().map { if (it.isLowerCase()) it.uppercase() else it.lowercase() }.joinToString(""))
        bw.flush()
        bw.close()
    }
}

//3003
import java.util.Scanner
fun main(){
    with(Scanner(System.`in`)){
        val chess=intArrayOf(1,1,2,2,2,8)
        val result=IntArray(6){0}
        var index=0
        for(i in chess){
            result[index]=i-nextInt()
            index++
        }
        for(i in result){
            print("$i ")
        }
    }
}

import java.util.Scanner
fun main(){
    with(Scanner(System.`in`)){
        val chess=intArrayOf(1,1,2,2,2,8)
        val result=IntArray(6){0}
        for((index,i) in chess.withIndex()){
            result[index]=i-nextInt()
        }
        for(i in result){
            print("$i ")
        }
    }
}

//3733
import java.util.Scanner
fun main(){
    val sc=Scanner(System.`in`)
    val sb=StringBuilder()
    var n:Int
    var s:Int
    while(sc.hasNext()){
        n=sc.nextInt()
        s=sc.nextInt()
        sb.append(s/(n+1)).append("\n")
    }
    if(sb.isNotEmpty()){
        sb.setLength(sb.length-1)
    }
    print(sb)
}

//5522
import java.util.Scanner
fun main()=with(Scanner(System.`in`)) {
    println(
        IntArray(5) { nextInt() }
        .sum()
    )
}

//6840
import java.util.Scanner
fun main(){
    with(Scanner(System.`in`)){
        val bowls=IntArray(3){nextInt()}
        bowls.sort()
        print(bowls[1])
    }  
}

import java.util.Scanner
fun main(){
    with(Scanner(System.`in`)){
        val bowls=List(3){nextInt()}
        print(bowls.sorted()[1])
    }  
}

import java.util.Scanner
fun main() {
    with(Scanner(System.`in`)){
        val bowls = mutableListOf<Int>()
        repeat(3) {
            bowls.add(nextInt())
        }
    bowls.sort()
    println(bowls[1])
    }
}

//8437
import java.util.Scanner
import java.math.BigInteger
fun main(){
    with(Scanner(System.`in`)){
        val A=BigInteger(readLine())
        val B=BigInteger(readLine())
        val C=A.add(B).divide(BigInteger("2"))
        val D=A.subtract(B).divide(BigInteger("2"))
        print("${C}\n${D}")
        }
}

//8545
fun main(){
    print(readln()!!.reversed())
}

//9086
fun main(){
    val sb=StringBuilder()
    val n=readln()!!.toInt()
    var str:String
    repeat(n){
        str=readln()
        sb.append("${str.first()}${str.last()}\n")
    }
    print(sb)
}

fun main(){
    val sb=StringBuilder()
    val n=readln()!!.toInt()
    var str:String
    repeat(n){
        str=readln()
        sb.append("${str[0]}${str[str.lastIndex]}\n")
    }
    print(sb)
}

//9498
fun main(){
    val score=readln()!!.toInt()
    when(score){
        in 90..100 -> print("A")
        in 80 until 90 -> print("B")
        in 70 until 80 -> print("C")
        in 60 until 70 -> print("D")
        else -> print("F")
    }
}

//10172
fun main(){
    print("""|\_/|
|q p|   /}
( 0 )${"\"\"\""}\
|"^"`    |
||_/=\\__|
""")
}

//10699
import java.text.SimpleDateFormat
import java.util.Calendar
fun main(){
    print(SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().timeInMillis))
}
->@@@@@timeInMillis는 Long 타입의 시간 (밀리초 단위)

SimpleDateFormat.format(...)는 Date 객체 또는 시간(long)을 받을 수 있음

✅ 대체 가능한 코드 (더 일반적임):
kotlin
복사
편집
SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().time)
Calendar.getInstance().time 은 Date 객체를 반환

SimpleDateFormat.format(...)에 자연스럽게 맞음

차이점:
코드	반환 타입	추천 여부
calendar.timeInMillis	Long (밀리초)	가능하지만 덜 직관적
calendar.time	Date 객체	✅ 더 자연스럽고 일반적@@@@@


//10757
import java.math.BigInteger
fun main(){
    val (A,B)=readln()!!.split(" ")
    print(BigInteger(A)+BigInteger(B))
}

import java.util.Scanner
import java.math.BigInteger
fun main()=with(Scanner(System.`in`)){
    print(BigInteger(next()).add(BigInteger(next())))
}

//
